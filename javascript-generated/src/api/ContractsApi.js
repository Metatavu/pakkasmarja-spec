/**
 * Pakkasmarja REST API
 * REST API for Pakkasmarja
 *
 * OpenAPI spec version: 0.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequest', 'model/Contract', 'model/ContractDocumentSignRequest', 'model/Forbidden', 'model/InternalServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequest'), require('../model/Contract'), require('../model/ContractDocumentSignRequest'), require('../model/Forbidden'), require('../model/InternalServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.PakkasmarjaRestClient) {
      root.PakkasmarjaRestClient = {};
    }
    root.PakkasmarjaRestClient.ContractsApi = factory(root.PakkasmarjaRestClient.ApiClient, root.PakkasmarjaRestClient.BadRequest, root.PakkasmarjaRestClient.Contract, root.PakkasmarjaRestClient.ContractDocumentSignRequest, root.PakkasmarjaRestClient.Forbidden, root.PakkasmarjaRestClient.InternalServerError);
  }
}(this, function(ApiClient, BadRequest, Contract, ContractDocumentSignRequest, Forbidden, InternalServerError) {
  'use strict';

  /**
   * Contracts service.
   * @module api/ContractsApi
   * @version 0.0.3
   */

  /**
   * Constructs a new ContractsApi. 
   * @alias module:api/ContractsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Requests contract document electronic signing
     * Requests contract document electronic signing
     * @param {String} id contract id
     * @param {String} type document type
     * @param {module:model/ContractDocumentSignRequest} body Payload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContractDocumentSignRequest} and HTTP response
     */
    this.createContractDocumentSignRequestWithHttpInfo = function(id, type, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createContractDocumentSignRequest");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createContractDocumentSignRequest");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createContractDocumentSignRequest");
      }


      var pathParams = {
        'id': id,
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = ContractDocumentSignRequest;

      return this.apiClient.callApi(
        '/contracts/{id}/documents/{type}/signRequests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Requests contract document electronic signing
     * Requests contract document electronic signing
     * @param {String} id contract id
     * @param {String} type document type
     * @param {module:model/ContractDocumentSignRequest} body Payload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContractDocumentSignRequest}
     */
    this.createContractDocumentSignRequest = function(id, type, body) {
      return this.createContractDocumentSignRequestWithHttpInfo(id, type, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find contract
     * Finds contract by id
     * @param {String} id contract id
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Contract} and HTTP response
     */
    this.findContractWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findContract");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = Contract;

      return this.apiClient.callApi(
        '/contracts/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find contract
     * Finds contract by id
     * @param {String} id contract id
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Contract}
     */
    this.findContract = function(id, opts) {
      return this.findContractWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns contract document
     * Returns contract document by type
     * @param {String} id contract id
     * @param {String} type document type
     * @param {String} format document format (HTML or PDF)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getContractDocumentWithHttpInfo = function(id, type, format) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContractDocument");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getContractDocument");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getContractDocument");
      }


      var pathParams = {
        'id': id,
        'type': type
      };
      var queryParams = {
        'format': format,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/contracts/{id}/documents/{type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns contract document
     * Returns contract document by type
     * @param {String} id contract id
     * @param {String} type document type
     * @param {String} format document format (HTML or PDF)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getContractDocument = function(id, type, format) {
      return this.getContractDocumentWithHttpInfo(id, type, format)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lists contracts
     * Lists contracts
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Contract>} and HTTP response
     */
    this.listContractsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = [Contract];

      return this.apiClient.callApi(
        '/contracts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Lists contracts
     * Lists contracts
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Expected response format. Accepted values application/json for JSON reponse (default) and application/vnd.openxmlformats-officedocument.spreadsheetml.sheet for Excel response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Contract>}
     */
    this.listContracts = function(opts) {
      return this.listContractsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update contract
     * Updates single contract
     * @param {String} id contract id
     * @param {module:model/Contract} body Payload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Contract} and HTTP response
     */
    this.updateContractWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateContract");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContract");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = Contract;

      return this.apiClient.callApi(
        '/contracts/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update contract
     * Updates single contract
     * @param {String} id contract id
     * @param {module:model/Contract} body Payload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Contract}
     */
    this.updateContract = function(id, body) {
      return this.updateContractWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
